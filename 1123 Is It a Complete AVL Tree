#include<cstdio>
#include<cmath>
#include<queue>
#include<vector>
using namespace std;
const int maxv = 50;
int a[maxv];
int n;
vector<int> ans, in;
struct node{
    int data, height;
    node *lchild, *rchild;
};
node* newNode(int v){
    node* Node = new node;
    Node->data = v;
    Node->height = 1;
    Node->lchild = Node->rchild = NULL;
    return Node;
}
int getHeight(node* root){
    if(root == NULL) return 0;
    return root->height;
}
int getBalanceFactor(node* root){
    return (getHeight(root->lchild) - getHeight(root->rchild));
}
void updateHeight(node* root){
    root->height = max(getHeight(root->lchild), getHeight(root->rchild)) + 1;
}
void L(node* &root){
    node* temp = root->rchild;
    root->rchild = temp->lchild;
    temp->lchild = root;
    updateHeight(root);
    updateHeight(temp);
    root = temp;
}
void R(node* &root){
    node* temp = root->lchild;
    root->lchild = temp->rchild;
    temp->rchild = root;
    updateHeight(root);
    updateHeight(temp);
    root = temp;
}
void insert(node* &root, int v){
    if(root == NULL){
        root = newNode(v);
        return;
    }
    if(v < root->data){
        insert(root->lchild, v);
        updateHeight(root);
        if(getBalanceFactor(root) == 2){
            if(getBalanceFactor(root->lchild) == 1){
                R(root);
            }else if(getBalanceFactor(root->lchild) == -1){
                L(root->lchild);
                R(root);
            }
        }
    }else{
        insert(root->rchild, v);
        updateHeight(root);
        if(getBalanceFactor(root) == -2){
            if(getBalanceFactor(root->rchild) == -1){
                L(root);
            }else if(getBalanceFactor(root->rchild) == 1){
                R(root->rchild);
                L(root);
            }
        }
    }
}
node* creatAVL(int data[], int n){
    node* root = NULL;
    for(int i = 0; i < n; ++i){
        insert(root, data[i]);
    }
    return root;
}
void travserLevel(node* root){
    queue<node*> q;
    q.push(root);
    while(!q.empty()){
        node* temp = q.front();
        ans.push_back(temp->data);
        q.pop();
        if(temp->lchild != NULL){
            q.push(temp->lchild);
        }
        if(temp->rchild != NULL){
            q.push(temp->rchild);
        }
    }
}
bool judgeCompleteTree(node* root){
    queue<node*> q;
    q.push(root);
    while(n){
        node* temp = q.front();
        q.pop();
        if(temp == NULL) return false;
        n--;
        q.push(temp->lchild);
        q.push(temp->rchild);
    }
    return true;
}
int main(){
    scanf("%d", &n);
    for(int i = 0; i < n; ++i){
        scanf("%d", &a[i]);
    }
    node* root = creatAVL(a, n);
    travserLevel(root);
    bool flag = judgeCompleteTree(root);
    for(int i = 0; i < ans.size(); ++i){
        printf("%d", ans[i]);
        if(i < ans.size() - 1) printf(" ");
        else printf("\n");
    }
    if(flag == true) printf("YES\n");
    else printf("NO\n");
    return 0;

}

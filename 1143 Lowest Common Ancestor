#include<cstdio>
#include<algorithm>
using namespace std;
const int maxv = 10010;
int pre[maxv], in[maxv];
int n, m;
struct node{
    int data;
    node* lchild;
    node* rchild;
    node(int v): data(v), lchild(NULL), rchild(NULL){}
};
node* creatTree(int preL, int preR, int inL, int inR){
    node* root = new node(pre[preL]);
    if(preL > preR) return NULL;
    int k;
    for(k = inL; k <= inR; ++k){
        if(in[k] == pre[preL]){
            break;
        }
    }
    int numLeft = k - inL;
    root->lchild = creatTree(preL + 1, preL + numLeft, inL, k - 1);
    root->rchild = creatTree(preL + numLeft + 1, preR, k + 1, inR);
    return root;
}
void findans(node* root, int u, int v){
    if(root == NULL) return;
    if((root->data >= u && root->data <= v) || (root->data <= u && root->data >= v)){
        if(root->data == u || root->data == v){
            printf("%d is an ancestor of %d.\n", root->data, root->data == u ? v : u);
        }else {
            printf("LCA of %d and %d is %d.\n", u, v, root->data);
        }
        return;
    }else if(root->data < u && root->data < v){
        findans(root->rchild, u, v);
    }else {
        findans(root->lchild, u, v);
    }
}
bool findU(int u){
    for(int i = 0; i < n; ++i){
        if(u == pre[i]){
            return true;
        }
    }
    return false;
}
int main(){
    scanf("%d%d", &m, &n);
    for(int i = 0; i < n; ++i){
        scanf("%d", &pre[i]);
        in[i] = pre[i];
    }
    sort(in, in + n);
    node* root = creatTree(0, n -1, 0, n -1);
    while(m--){
        int u, v;
        scanf("%d%d", &u, &v);
        if(!findU(u) && !findU(v)){
            printf("ERROR: %d and %d are not found.\n", u, v);
        }else if(!findU(u) && findU(v)){
            printf("ERROR: %d is not found.\n", u);
        }else if(findU(u) && !findU(v)){
            printf("ERROR: %d is not found.\n", v);
        }else{
            findans(root, u, v);
        }
    }
    return 0;
}

#include<cstdio>
#include<iostream>
#include<vector>
#include<set>
#include<algorithm>
using namespace std;
const int maxv = 1000;
vector<int> ans;
const int INF = 0x3fffffff;
int n, m;
int G[maxv][maxv];
int path[maxv];
int MIN = INF;
int ansindex;
void travel(int path[], int &num, int &sum, int index){
    int i, flag = 0;
    set<int> Set;
    for(i = 0; i < num - 1; ++i){
        if(G[path[i]][path[i+1]] != INF){
            sum += G[path[i]][path[i+1]];
            Set.insert(path[i]);
            Set.insert(path[i+1]);
        }else{
            if(G[path[i]][path[i+1]] == INF){
                break;
            }
        }
    }

    if(i != num - 1 ){
        printf("NA (Not a TS cycle)\n");
    }
    else if(i == num - 1 && num == n + 1 && path[0] == path[num - 1] && Set.size() == n){
         printf("%d (TS simple cycle)\n", sum);
    } else if(i == num - 1 && num > n + 1 && path[0] == path[num - 1]){
        printf("%d (TS cycle)\n", sum);
    }else{
        printf("%d (Not a TS cycle)\n", sum);
    }
    if(i == num - 1 && num >= n + 1 && path[0] == path[num - 1]){
        MIN = min(MIN, sum);
        ansindex = index;
    }
}

int main(){
    scanf("%d%d", &n, &m);
    fill(G[0], G[0] + maxv * maxv, INF);
    for(int i = 0; i < m; ++i){
        int a, b, dis;
        scanf("%d%d%d", &a, &b, &dis);
        G[a][b] = G[b][a] = dis;
    }
    int k;
    scanf("%d", &k);
    int i;
    for(i = 1; i <= k; ++i){
        int num;
        scanf("%d", &num);
        for(int j = 0; j < num; ++j){
            scanf("%d", &path[j]);
        }
        int sum = 0;
        printf("Path %d: ", i);
        travel(path, num, sum, i);
    }
    printf("Shortest Dist(%d) = %d\n", ansindex, MIN);
    return 0;
}

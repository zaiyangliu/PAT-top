#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int inf = 0x3fffffff;
const int Max = 510;
int n, m, st, ed;
int dist[Max];
int costMin[Max];
int cost[Max][Max];
int Grap[Max][Max];
bool visted[Max] = {false};
int pre[Max];
void Dijkstra(int st){
    fill(dist, dist + Max, inf);
    fill(costMin, costMin + Max, inf);
    for(int i = 0; i < n; ++i) pre[i] = i;
    dist[st] = 0;
    costMin[st] = 0;
    for(int i = 0; i < n; ++i){
        int u = -1, min = inf;
        for(int j = 0; j < n; ++j){
            if(visted[j] == false && dist[j] < min){
                u = j;
                min = dist[j];
            }
        }
        if(u == -1) return;
        visted[u] = true;
        for(int v = 0; v < n; ++v){
            if(visted[v] == false && Grap[u][v] != inf){
                if(dist[v] > dist[u] + Grap[u][v]){
                    dist[v] = dist[u] + Grap[u][v];
                    costMin[v] = costMin[u] + cost[u][v];
                    pre[v] = u;
                }else if(visted[v] == false && dist[v] == dist[u] + Grap[u][v]){
                    if(costMin[v] > costMin[u] + cost[u][v]){
                        costMin[v] = costMin[u] + cost[u][v];
                        pre[v] = u;
                    }
                    
                }
            }
    
        }
    }
}

void DFS(int v){
    if(v == st){
        printf("%d ", v);
        return;
    }
    DFS(pre[v]);
    printf("%d ", v);
}
int main(){
    scanf("%d%d%d%d", &n, &m, &st, &ed);
    int u, v;
    fill(Grap[0], Grap[0] + Max*Max, inf);
    for(int i = 0; i < m; ++i){
        scanf("%d%d", &u, &v);
        scanf("%d%d", &Grap[u][v], &cost[u][v]);
        Grap[v][u] = Grap[u][v];
        cost[v][u] = cost[u][v];
    }
    Dijkstra(st);
    DFS(ed);
    printf("%d %d", dist[ed], costMin[ed]);
    return 0;
}

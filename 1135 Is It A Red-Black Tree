#include<cstdio>
#include<iostream>
using namespace std;
struct node{
    int data;
    node *left, *right;
    node(int v): data(v), left(NULL), right(NULL){}
};
node* creatTree(node* root, int v){
    if(root == NULL){
        root = new node(v);
    }else if(abs(v) < abs(root->data)){
        root->left = creatTree(root->left, v);
    }else if(abs(v) > abs(root->data)){
        root->right = creatTree(root->right, v);
    }
    return root;
}
bool judge1(node* root){       //(4) If a node is red, then both its children are black.
    if(root == NULL) return true;
    if(root->data < 0){
        if(root->left != NULL && root->left->data < 0) return false;
        if(root->right != NULL && root->right->data < 0) return false;
    }
    return judge1(root->left) && judge1(root->right);
}
int getNum(node* root){  //(5) For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.
    if(root == NULL) return 0;
    int L = getNum(root->left);
    int R = getNum(root->right);
    return root->data > 0 ? max(L, R) + 1 : max(L, R);
}
bool judge2(node* root){
    if(root == NULL) return true;
    int L = getNum(root->left);
    int R = getNum(root->right);
    if(L != R) return false;
    return (judge2(root->left)) && judge2(root->right);
}
int main(){
    int k, n;
    scanf("%d", &k);
    for(int i = 0; i < k; ++i){
        scanf("%d", &n);
        node* root = NULL;
        for(int i = 0; i < n; ++i){
            int v;
            scanf("%d", &v);
            root = creatTree(root, v);
        }
        if(root->data < 0 || judge1(root) == false || judge2(root) == false){
            printf("No\n");
        }else{
            printf("Yes\n");
        }
    }
    return 0;
}
